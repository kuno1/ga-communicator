name: Ga Communicator CI

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [ '7.4', '8.0' ] # PHP versions to check.
        wp: [ 'latest', '5.9' ]      # WordPress version to check.
        tools: [ composer ]
        scoper: [ 'yes', 'no' ]
    services:
      mysql:
        image: mysql:8.0
        options: --health-cmd "mysqladmin ping --host 127.0.0.1 --port 3306" --health-interval 20s --health-timeout 10s --health-retries 10
        ports:
          - 3306/tcp
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
    name: UnitTest WP ${{ matrix.wp }} in PHP ${{ matrix.php }} with PHP Scoper=${{ matrix.scoper }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP with composer v2
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: ${{ matrix.tools }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Do PHP Scoper
        uses: ./.github/actions/php-scoper
        with:
          scoper: ${{ matrix.scoper }}

      - name: Make Binaries Executionable
        if: matrix.scoper == 'yes'
        run: chmod +x vendor-prefixed/vendor/bin/*

      - name: Start MySQL
        run: |
          sudo systemctl start mysql
          mysql -h 127.0.0.1 --port 3306 -u root --password=root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';"

      - name: Install WordPress
        run: bash bin/install-wp-tests.sh wordpress root root 127.0.0.1:3306 ${{ matrix.wp }}

      - name: Run test suite with Vendor
        if: matrix.scoper == 'no'
        run: composer test

      - name: Run test suite with PHP Scoper
        if: matrix.scoper == 'yes'
        run: composer test:scoper

  lint:
    name: PHP Syntax check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP with composer v2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          tools: composer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Check Lint
        run: composer lint

  assets:
    name: Check Assets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install NPM Packages
        run: npm install

      - name: Check JS & CSS syntax
        run: npm run lint

  status-check:
    name: Status Check
    needs: [ test, lint, assets ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  release:
    name: Release Build as Plugin
    needs: [ status-check ]
    if: contains(github.ref, 'tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP with composer v2
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          tools: composer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Package
        run: bash bin/build.sh

      - uses: ./.github/actions/php-scoper
        name: Do PHP Scoper
        with:
          scoper: 'yes'

      - name: Clean Unwanted files
        run: bash bin/clean.sh

      - name: Create Zip
        run: zip -r ${{ github.event.repository.name }}.zip ./

      - name: Deploy Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Zip
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}.zip
          asset_content_type: application/zip
